@page "/dashboard"
@using Microsoft.EntityFrameworkCore
@using StudentTasker.Data
@using StudentTaskerModels
@using Telerik.Blazor.Components
@implements IDisposable

@inject IDbContextFactory<DataContext> ConstextFactory
@inject StudentTasker.Service.TaskService.IStudentTaskService TaskService
@inject NavigationManager NavigationManager;






<div class="d-flex justify-content-center mt-5">
    <h3>Dashboard</h3>
</div>

<div class="d-flex row justify-content-center">
    <div class="border border-0 rounded w-50">
        @if (TotalTasks != CountCompleted)
        {
            <PieChartComponent CountCompleted="CountCompleted"
                               CountNotCompleted="CountNotCompleted"
                               TotalTasks="TotalTasks"
                               StudentTasks="StudentTasks"
                               SubjectName="SubjectName"></PieChartComponent>
        }
        else if (TotalTasks > 0 && TotalTasks == CountCompleted)
        {
            <div class="d-flex row justify-content-center mt-5">
                <h1>Good Job Reanna You met your Daily Goal!</h1>
            </div>

        }
        else
        {
            <div class="d-flex row justify-content-center mt-5">
                <h1>Your School Day Hasn't Started!</h1>
            </div>
        }

    </div>

    @if (TotalTasks != CountCompleted)
    {
        <div class="border border-0 rounded ml-2 mr-2">

            <SubjectListComponent StudentTasks="StudentTasks"
                                  CountCompleted="CountCompleted"
                                  CountNotCompleted="CountNotCompleted"
                                  TotalTasks="TotalTasks"
                                  SubjectName="SubjectName"></SubjectListComponent>

        </div>
    }
    else if (TotalTasks > 0 && TotalTasks == CountCompleted)
    {
        <div class="border border-0 rounded ml-2 mr-2">

            <SubjectListComponent StudentTasks="StudentTasks"
                                  CountCompleted="CountCompleted"
                                  CountNotCompleted="CountNotCompleted"
                                  TotalTasks="TotalTasks"
                                  SubjectName="SubjectName"></SubjectListComponent>

        </div>
    }
    else
    {

    }


</div>
<div class="row d-flex justify-content-center min-vh-100" style="padding-bottom: 100px">


    <div class="mt-5 text-center" style="margin-right: 100px">
        <ProgressBarComponent Title="@Subject.Math.ToString()" Type="guage" MaxValueToAdd="MathMaxValue" ValueToAdd="MathPBValue"></ProgressBarComponent>
        <ProgressBarComponent Title="@Subject.Science.ToString()" Type="guage" MaxValueToAdd="ScienceMaxValue" ValueToAdd="SciencePBValue"></ProgressBarComponent>
    </div>
    <div class="mt-5 text-center">
        <ProgressBarComponent Title="@Subject.English.ToString()" Type="guage" MaxValueToAdd="ElaMaxValue" ValueToAdd="ElaPBValue"></ProgressBarComponent>
        <ProgressBarComponent Title="@Subject.History.ToString()" Type="guage" MaxValueToAdd="HistoryMaxValue" ValueToAdd="HistoryPBValue"></ProgressBarComponent>
    </div>
</div>


@code {
    PieChartComponent PieChartComponent;
    System.Threading.Timer timer;
    public string Title { get; set; }

    private List<StudentTask> StudentTasks { get; set; }
    private List<StudentTask> StudentTasksProgress { get; set; }

    public int CountCompleted { get; set; }

    public int CountCompletedWeek { get; set; }

    public int CountNotCompleted { get; set; }

    public int TotalTasksToday { get; set; }

    public int TotalTasks { get; set; }

    public string SubjectName { get; set; } = "Today";



    public int ScienceMaxValue { get; set; } = (int)SubjectTotals.Science;

    public int HistoryMaxValue { get; set; } = (int)SubjectTotals.History;

    public int ElaMaxValue { get; set; } = (int)SubjectTotals.English;

    public int MathMaxValue { get; set; } = (int)SubjectTotals.Math;

    public int MathPBValue { get; set; }
    public int SciencePBValue { get; set; }
    public int ElaPBValue { get; set; }
    public int HistoryPBValue { get; set; }


    public int MaxValue { get; set; }
    public int PBValue { get; set; }


    protected override async Task OnInitializedAsync()
    {
        StudentTasks = await Task.Run(() => TaskService.GetAllStudentTasksAsync());
        StudentTasksProgress = await Task.Run(() => TaskService.GetAllStudentTasksAsync());

        StudentTasks = StudentTasks.Where(x => x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).OrderByDescending(x => x.DateCreated).ToList();
        CountCompleted = StudentTasks.Where(x => (x.IsCompleted == true) && x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
        CountNotCompleted = StudentTasks.Where(x => (x.IsCompleted == false) && x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
        TotalTasksToday = StudentTasks.Where(x => x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
        TotalTasks = TotalTasksToday;

        MathPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.Math.ToString()).Count();
        SciencePBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.Science.ToString()).Count();
        ElaPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.English.ToString()).Count();
        HistoryPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.History.ToString()).Count();

        timer = new System.Threading.Timer(async _ => // async void
        {
            StudentTasks = await Task.Run(() => TaskService.GetAllStudentTasksAsync());
            StudentTasksProgress = await Task.Run(() => TaskService.GetAllStudentTasksAsync());

            StudentTasks = StudentTasks.Where(x => x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).OrderByDescending(x => x.DateCreated).ToList();
            CountCompleted = StudentTasks.Where(x => (x.IsCompleted == true) && x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
            CountNotCompleted = StudentTasks.Where(x => (x.IsCompleted == false) && x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
            TotalTasksToday = StudentTasks.Where(x => x.DateCreated.ToShortDateString() == DateTime.Today.ToShortDateString()).Count();
            TotalTasks = TotalTasksToday;
            MathPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.Math.ToString()).Count();
            SciencePBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.Science.ToString()).Count();
            ElaPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.English.ToString()).Count();
            HistoryPBValue = StudentTasksProgress.Where(x => (x.IsCompleted == true) && x.SubjectName == SubjectType.History.ToString()).Count();
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch
            {
            }
        }, null, 0, 5000);
    }

    public void Dispose()
    {
        if (timer is not null) // C# 9.0
        {
            timer.Dispose();
        }
    }

}


<style>
    .content {
        background-color: #485461;
        background-image: linear-gradient(315deg, #485461 0%, #28313b 74%);
        color: ghostwhite;
        -webkit-font-smoothing: antialiased;
    }
</style>